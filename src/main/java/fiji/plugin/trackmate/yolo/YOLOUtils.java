package fiji.plugin.trackmate.yolo;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import fiji.plugin.trackmate.Logger;
import fiji.plugin.trackmate.Spot;
import net.imglib2.Interval;

public class YOLOUtils
{

	/**
	 * Import the text results files generated by the 'save_txt' option, and
	 * returns them as a list of spots. The radius of the spots is the mean of
	 * the width and height of the YOLO detections.
	 * <p>
	 * The YOLO results text file is made of one line per detection, and each
	 * line is formatted as follow:
	 * <p>
	 * <code>
	 * class_id center_x center_y width height confidence
	 * </code>
	 * <p>
	 * Where:
	 * <ul>
	 * <li>class_id is the class identifier of the detected object
	 * <li>center_x and center_y are the normalized coordinates of the center of
	 * the bounding box (values between 0 and 1)
	 * <li>width and height are the normalized width and height of the bounding
	 * box (values between 0 and 1).
	 * <li>(optional) confidence is the confidence score of the detection
	 * <ul>
	 *
	 * @param path
	 *            the path to the YOLO results file.
	 * @param interval
	 *            the interval in the input image that was passed to YOLO.
	 * @param calibration
	 *            the physical calibration of the input image.
	 * @param logger
	 *            a {@link Logger} to report error messages.
	 * @return a new list of spots.
	 */
	public static List< Spot > importResultFile(
			final String path,
			final Interval interval,
			final double[] calibration,
			final Logger logger )
	{
		final long width = interval.dimension( 0 );
		final long height = interval.dimension( 1 );
		final long x0 = interval.min( 0 );
		final long y0 = interval.min( 1 );

		final List< Spot > spots = new ArrayList<>();
		try (BufferedReader br = new BufferedReader( new FileReader( path ) ))
		{
			String line;
			int ln = 0;
			while ( ( line = br.readLine() ) != null )
			{
				ln++;
				final String[] values = line.split( "," );
				if ( values.length < 5 )
				{
					logger.error( "Line " + ln + " in file " + path + " as unexpected number of values. Should be at least 5, but was " + values.length + "." );
					continue;
				}
				// Center
				final double xr = Double.parseDouble( values[ 1 ].trim() );
				final double yr = Double.parseDouble( values[ 2 ].trim() );
				// Size
				final double wr = Double.parseDouble( values[ 3 ].trim() );
				final double hr = Double.parseDouble( values[ 4 ].trim() );

				// Global coords
				final double x = calibration[ 0 ] * ( x0 + xr * width );
				final double y = calibration[ 1 ] * ( y0 + yr * height );
				final double w = calibration[ 0 ] * wr * width;
				final double h = calibration[ 1 ] * hr * height;
				final double r = 0.5 * ( w + h );

				// Do we have confidence?
				final double quality;
				if ( values.length >= 5 )
					quality = Double.parseDouble( values[ 5 ].trim() );
				else
					quality = 1.;

				final Spot spot = new Spot( x, y, 0., r, quality );
				spots.add( spot );
			}
		}
		catch ( final IOException e )
		{
			logger.error( "Error reading the file " + path + "\n" + e.getMessage() + '\n' );
			e.printStackTrace();
			return Collections.emptyList();
		}

		return spots;
	}

}
